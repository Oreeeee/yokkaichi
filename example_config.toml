# This is an example configuration file for Yokkaichi.
# Configure this for your preferences.
# Pass the location to this config file with -c as an argument.
# Example: python -m yokkaichi -c sample.toml
# You can pass this without the file location and it will look for yokkaichi.toml in your current location.
# Do not comment any of the config's options, it will currently cause a crash

version = "5" # Changed for every change breaking config compatibility

[platforms]
java = true
bedrock = false

[platforms.additional]
java_query = false # Use the Query protocol (more info, but a little bit broken and slow right now)

[scanner]
type = "ping_scan" # "masscan" type is faster, but less accurate and requires root/admin, and "ping_scan" is slower but more accurate and doesn't require escalated priviledges
countries = ["US", "DE"] # Countries to scan, standard TOML array, use ISO 3166-1 alpha-2 codes (the 2 letter ones), empty to disable
ip_list = "" # Location to the list of IP:Port combinations / CIDR blocks / IP addresses to scan, separated by newlines, empty to disable
ports = "25564-25566,25569" # Port list (not TOML's format! Similarly to nmap and masscan splits ports by commas and sets ranges with hyphens)
threads = 100 # Setting this to a higher value will make the scanning faster, but too much can crash the system or the network
timeout = 3.0 # Timeout in seconds before assuming the server is offline
offline_printing = "disabled" # Should the script output offline servers. "disabled" will print nothing, "offline" will print offline servers and "full_traceback" will print entire traceback
output = "out.json" # IMPORTANT! That's where the servers go!

[masscan]
args = "" # Additional arguments for masscan

[ip2location]
enabled = false # Enable getting the location of the server
cache = true # Enable for faster speed at the cost of RAM
